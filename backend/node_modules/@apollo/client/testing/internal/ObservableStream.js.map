{"version":3,"file":"ObservableStream.js","sourceRoot":"","sources":["../../../src/testing/internal/ObservableStream.ts"],"names":[],"mappings":";AACA,OAAO,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAC;AAUjD;IAEE,0BAAY,UAAyB;QACnC,IAAI,CAAC,MAAM,GAAG,IAAI,cAAc,CAAqB;YACnD,KAAK,YAAC,UAAU;gBACd,UAAU,CAAC,SAAS,CAClB,UAAC,KAAK,IAAK,OAAA,UAAU,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,OAAA,EAAE,CAAC,EAA3C,CAA2C,EACtD,UAAC,KAAK,IAAK,OAAA,UAAU,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,OAAA,EAAE,CAAC,EAA5C,CAA4C,EACvD,cAAM,OAAA,UAAU,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,EAAxC,CAAwC,CAC/C,CAAC;YACJ,CAAC;SACF,CAAC,CAAC,SAAS,EAAE,CAAC;IACjB,CAAC;IAED,+BAAI,GAAJ,UAAK,EAAmC;YAAnC,qBAAiC,EAAE,KAAA,EAAjC,eAAa,EAAb,OAAO,mBAAG,GAAG,KAAA;QAClB,OAAO,OAAO,CAAC,IAAI,CAAC;YAClB,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,UAAC,MAAM,IAAK,OAAA,MAAM,CAAC,KAAM,EAAb,CAAa,CAAC;YAClD,IAAI,OAAO,CAAI,UAAC,CAAC,EAAE,MAAM;gBACvB,UAAU,CACR,MAAM,EACN,OAAO,EACP,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAC5C,CAAC;YACJ,CAAC,CAAC;SACH,CAAC,CAAC;IACL,CAAC;IAEK,mCAAQ,GAAd,UAAe,OAAqB;;;;;4BACpB,qBAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,EAAA;;wBAAhC,KAAK,GAAG,SAAwB;wBACtC,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;wBAClE,sBAAQ,KAA+C,CAAC,KAAK,EAAC;;;;KAC/D;IAEK,oCAAS,GAAf,UAAgB,OAAqB;;;;;4BACrB,qBAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,EAAA;;wBAAhC,KAAK,GAAG,SAAwB;wBACtC,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;wBACnE,sBAAQ,KAAgD,CAAC,KAAK,EAAC;;;;KAChE;IAEK,uCAAY,GAAlB,UAAmB,OAAqB;;;;;4BACxB,qBAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,EAAA;;wBAAhC,KAAK,GAAG,SAAwB;wBACtC,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,CAAC;;;;;KAC7C;IACH,uBAAC;AAAD,CAAC,AA3CD,IA2CC","sourcesContent":["import type { Observable } from \"../../utilities/index.js\";\nimport { ReadableStream } from \"node:stream/web\";\n\ninterface TakeOptions {\n  timeout?: number;\n}\ntype ObservableEvent<T> =\n  | { type: \"next\"; value: T }\n  | { type: \"error\"; error: any }\n  | { type: \"complete\" };\n\nexport class ObservableStream<T> {\n  private reader: ReadableStreamDefaultReader<ObservableEvent<T>>;\n  constructor(observable: Observable<T>) {\n    this.reader = new ReadableStream<ObservableEvent<T>>({\n      start(controller) {\n        observable.subscribe(\n          (value) => controller.enqueue({ type: \"next\", value }),\n          (error) => controller.enqueue({ type: \"error\", error }),\n          () => controller.enqueue({ type: \"complete\" })\n        );\n      },\n    }).getReader();\n  }\n\n  take({ timeout = 100 }: TakeOptions = {}) {\n    return Promise.race([\n      this.reader.read().then((result) => result.value!),\n      new Promise<T>((_, reject) => {\n        setTimeout(\n          reject,\n          timeout,\n          new Error(\"Timeout waiting for next event\")\n        );\n      }),\n    ]);\n  }\n\n  async takeNext(options?: TakeOptions): Promise<T> {\n    const event = await this.take(options);\n    expect(event).toEqual({ type: \"next\", value: expect.anything() });\n    return (event as ObservableEvent<T> & { type: \"next\" }).value;\n  }\n\n  async takeError(options?: TakeOptions): Promise<any> {\n    const event = await this.take(options);\n    expect(event).toEqual({ type: \"error\", error: expect.anything() });\n    return (event as ObservableEvent<T> & { type: \"error\" }).error;\n  }\n\n  async takeComplete(options?: TakeOptions): Promise<void> {\n    const event = await this.take(options);\n    expect(event).toEqual({ type: \"complete\" });\n  }\n}\n"]}